<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <style>
        .controlsOuter {
            background: grey;
            padding: 20px;
            height: 105px !important;
        }

        #title {
            background: grey;
            padding: 20px;
            height: 75px !important;
            bottom: 15%;
        }

        #timer {
            top: 20px !important;
        }

        #duration {
            top: 20px !important;
        }

        #progress {
            bottom: 134px;
            height: 13px;
            background-color: rgba(30, 222, 7, 0.86);
        }

        #prevBtn {
            position: absolute;
            left: 20% !important;
        }

        #nextBtn {
            position: absolute;
            right: 20% !important;
        }

        #shuffleBtn {
            position: absolute;
            background: green;
            width: 35px;
            height: 35px;
            top: 50%;
            left: 14%;
            margin: -17.5px auto;
        }
    </style>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("REBMEM", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                @if (Request.IsAuthenticated)
                {
                    <ul class="nav navbar-nav">
                        <li>@Html.ActionLink("Tracks", "Index", "Tracks")</li>
                        <li>@Html.ActionLink("Albums", "Index", "Albums")</li>
                        <li>@Html.ActionLink("Artists", "Index", "Artists")</li>
                        <li>@Html.ActionLink("Playlists", "Index", "Playlists")</li>
                        <li>@Html.ActionLink("Upload Music", "Index", "AudioFiles")</li>
                    </ul>
                }
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
    </div>

    @Scripts.Render("~/bundles/lib")
    @RenderSection("scripts", required: false)

    @if (Request.IsAuthenticated)
    {
        <div>

            <!-- Top Info -->
            <div id="title">
                <span id="track"></span>
                <div id="timer">0:00</div>
                <div id="duration">0:00</div>
            </div>
            <!-- Controls -->
            <div class="controlsOuter">
                <div class="controlsInner">
                    <div id="loading"></div>
                    <div class="btn" id="playBtn"></div>
                    <div class="btn" id="pauseBtn"></div>
                    <div class="btn" id="prevBtn"></div>
                    <div class="btn" id="nextBtn"></div>
                </div>
                <div class="btn" id="playlistBtn"></div>
                <div class="btn" id="shuffleBtn"></div>
                <div class="btn" id="volumeBtn"></div>
            </div>

            <!-- Progress -->
            <div id="progress"></div>

            <!-- Playlist -->
            <div id="playlist">
                <div id="list"></div>
            </div>

            <!-- Volume -->
            <div id="volume" class="fadeout">
                <div id="barFull" class="bar"></div>
                <div id="barEmpty" class="bar"></div>
                <div id="sliderBtn"></div>
            </div>
        </div>
    }
</body>
</html>
@if (Request.IsAuthenticated)
{
    <script src="/Scripts/howler.core.js"></script>
    <script language="javascript">

        var currentPlayer = {};

        var tracks = [];

        $.get("/api/TracksApi", function (data, status) {
            for (var r in data) {
                tracks.push({
                    title: data[r].Name,
                    file: data[r].AudioFile.FilePath,
                    howl: null,
                });
            }
        }).done(function (data, status) {
            // Cache references to DOM elements.
            var elms = ['track', 'timer', 'duration', 'playBtn', 'pauseBtn', 'prevBtn', 'nextBtn', 'playlistBtn', 'shuffleBtn', 'volumeBtn', 'progress', 'loading', 'playlist', 'list', 'volume', 'barEmpty', 'barFull', 'sliderBtn'];
            elms.forEach(function (elm) {
                window[elm] = document.getElementById(elm);
            });

            /**
             * Player class containing the state of our playlist and where we are in it.
             * Includes all methods for playing, skipping, updating the display, etc.
             * param {Array} playlist Array of objects with playlist song details ({title, file, howl}).
             */
            var Player = function (playlist) {
                this.playlist = playlist;
                this.index = 0;

                // Display the title of the first track.
                track.innerHTML = '1. ' + playlist[0].title;

                // Setup the playlist display.
                playlist.forEach(function (song) {
                    var div = document.createElement('div');
                    div.className = 'list-song';
                    div.innerHTML = song.title;
                    div.onclick = function () {
                        player.skipTo(playlist.indexOf(song));
                    };
                    list.appendChild(div);
                });
            };
            Player.prototype = {
                /**
                 * Play a song in the playlist.
                 * param  {Number} index Index of the song in the playlist (leave empty to play the first or current).
                 */
                play: function (index) {
                    var self = this;
                    var sound;

                    index = typeof index === 'number' ? index : self.index;
                    var data = self.playlist[index];

                    // If we already loaded this track, use the current one.
                    // Otherwise, setup and load a new Howl.
                    if (data.howl) {
                        sound = data.howl;
                    } else {
                        sound = data.howl = new Howl({
                            src: ['/audio/' + data.file + '.mp3'],
                            html5: true, // Force to HTML5 so that the audio can stream in (best for large files).
                            onplay: function () {
                                // Display the duration.
                                duration.innerHTML = self.formatTime(Math.round(sound.duration()));

                                // Start upating the progress of the track.
                                requestAnimationFrame(self.step.bind(self));

                                pauseBtn.style.display = 'block';
                            },
                            onload: function () {
                                loading.style.display = 'none';
                            },
                            onend: function () {
                                self.skip('right');
                            }
                        });
                    }

                    // Begin playing the sound.
                    sound.play();

                    // Update the track display.
                    track.innerHTML = (index + 1) + '. ' + data.title;

                    // Show the pause button.
                    if (sound.state() === 'loaded') {
                        playBtn.style.display = 'none';
                        pauseBtn.style.display = 'block';
                    } else {
                        loading.style.display = 'block';
                        playBtn.style.display = 'none';
                        pauseBtn.style.display = 'none';
                    }

                    // Keep track of the index we are currently playing.
                    self.index = index;
                },

                /**
                 * Pause the currently playing track.
                 */
                pause: function () {
                    var self = this;

                    // Get the Howl we want to manipulate.
                    var sound = self.playlist[self.index].howl;
                    // Puase the sound.
                    if (sound != null) {
                        sound.pause();
                    }

                    // Show the play button.
                    playBtn.style.display = 'block';
                    pauseBtn.style.display = 'none';
                },

                /**
                 * Skip to the next or previous track.
                 * param  {String} direction 'next' or 'prev'.
                 */
                skip: function (direction) {
                    var self = this;

                    // Get the next track based on the direction of the track.
                    var index = 0;
                    if (direction === 'prev') {
                        index = self.index - 1;
                        if (index < 0) {
                            index = self.playlist.length - 1;
                        }
                    } else {
                        index = self.index + 1;
                        if (index >= self.playlist.length) {
                            index = 0;
                        }
                    }

                    self.skipTo(index);
                },

                /**
                 * Skip to a specific track based on its playlist index.
                 * param  {Number} index Index in the playlist.
                 */
                skipTo: function (index) {
                    var self = this;

                    // Stop the current track.
                    if (self.playlist[self.index].howl) {
                        self.playlist[self.index].howl.stop();
                    }

                    // Reset progress.
                    progress.style.width = '0%';

                    // Play the new track.
                    self.play(index);
                },

                /**
                 * Set the volume and update the volume slider display.
                 * param  {Number} val Volume between 0 and 1.
                 */
                volume: function (val) {
                    var self = this;

                    // Update the global volume (affecting all Howls).
                    Howler.volume(val);

                    // Update the display on the slider.
                    var barWidth = (val * 90) / 100;
                    barFull.style.width = (barWidth * 100) + '%';
                    sliderBtn.style.left = (window.innerWidth * barWidth + window.innerWidth * 0.05 - 25) + 'px';
                },

                /**
                 * Seek to a new position in the currently playing track.
                 * param  {Number} per Percentage through the song to skip.
                 */
                seek: function (per) {
                    var self = this;

                    // Get the Howl we want to manipulate.
                    var sound = self.playlist[self.index].howl;

                    // Convert the percent into a seek position.
                    if (sound.playing()) {
                        sound.seek(sound.duration() * per);
                    }
                },

                /**
                 * The step called within requestAnimationFrame to update the playback position.
                 */
                step: function () {
                    var self = this;

                    // Get the Howl we want to manipulate.
                    var sound = self.playlist[self.index].howl;

                    // Determine our current seek position.
                    var seek = sound.seek() || 0;
                    timer.innerHTML = self.formatTime(Math.round(seek));
                    progress.style.width = (((seek / sound.duration()) * 100) || 0) + '%';

                    // If the sound is still playing, continue stepping.
                    if (sound.playing()) {
                        requestAnimationFrame(self.step.bind(self));
                    }
                },

                /**
                 * Toggle the playlist display on/off.
                 */
                togglePlaylist: function () {
                    var self = this;
                    var display = (playlist.style.display === 'block') ? 'none' : 'block';

                    setTimeout(function () {
                        playlist.style.display = display;
                    }, (display === 'block') ? 0 : 500);
                    playlist.className = (display === 'block') ? 'fadein' : 'fadeout';
                },

                /**
                 * Toggle the volume display on/off.
                 */
                toggleVolume: function () {
                    var self = this;
                    var display = (volume.style.display === 'block') ? 'none' : 'block';

                    setTimeout(function () {
                        volume.style.display = display;
                    }, (display === 'block') ? 0 : 500);
                    volume.className = (display === 'block') ? 'fadein' : 'fadeout';
                },

                /**
                 * Format the time from seconds to M:SS.
                 * param  {Number} secs Seconds to format.
                 * return {String}      Formatted time.
                 */
                formatTime: function (secs) {
                    var minutes = Math.floor(secs / 60) || 0;
                    var seconds = (secs - minutes * 60) || 0;

                    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
                }
            };

            // Setup our new audio player class and pass it the playlist.
            var player = new Player(tracks);


            // Bind our player controls.
            playBtn.addEventListener('click', function () {
                player.play();
            });
            pauseBtn.addEventListener('click', function () {
                player.pause();
            });
            prevBtn.addEventListener('click', function () {
                player.skip('prev');
            });
            nextBtn.addEventListener('click', function () {
                player.skip('next');
            });
            playlistBtn.addEventListener('click', function () {
                player.togglePlaylist();
            });
            //Shuffle event listener
            shuffleBtn.addEventListener('click', function () {
                player.pause();
                var shuffled = shuffle(player.playlist);
                player.playlist = shuffled;

                while (list.firstChild) {
                    list.removeChild(list.firstChild);
                }

                player = new Player(shuffled);
            });
            playlist.addEventListener('click', function () {
                player.togglePlaylist();
            });
            volumeBtn.addEventListener('click', function () {
                player.toggleVolume();
            });
            volume.addEventListener('click', function () {
                player.toggleVolume();
            });

            // Setup the event listeners to enable dragging of volume slider.
            barEmpty.addEventListener('click', function (event) {
                var per = event.layerX / parseFloat(barEmpty.scrollWidth);
                player.volume(per);
            });
            sliderBtn.addEventListener('mousedown', function () {
                window.sliderDown = true;
            });
            sliderBtn.addEventListener('touchstart', function () {
                window.sliderDown = true;
            });
            volume.addEventListener('mouseup', function () {
                window.sliderDown = false;
            });
            volume.addEventListener('touchend', function () {
                window.sliderDown = false;
            });

            var move = function (event) {
                if (window.sliderDown) {
                    var x = event.clientX || event.touches[0].clientX;
                    var startX = window.innerWidth * 0.05;
                    var layerX = x - startX;
                    var per = Math.min(1, Math.max(0, layerX / parseFloat(barEmpty.scrollWidth)));
                    player.volume(per);
                }
            };

            volume.addEventListener('mousemove', move);
            volume.addEventListener('touchmove', move);

            currentPlayer = player;
        });


        function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }

    </script>
}
